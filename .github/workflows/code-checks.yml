name: Validate Source Code
on:
  - push
  - pull_request

permissions: read-all

jobs:
  changes:
    name: Determine jobs
    runs-on: ubuntu-latest
    outputs:
      all-packages: ${{ steps.all-filter.outputs.changes }}
      mutation-packages: ${{ steps.mutation-filter.outputs.changes }}
      performance-packages: ${{ steps.performance-filter.outputs.changes }}
      tested-packages: ${{ steps.tested-filter.outputs.changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.4.0
      - name: Get Node.js configuration
        id: node
        run: echo ::set-output name=VERSION::$(cat .nvmrc)
      - name: Install Node.js
        uses: actions/setup-node@v2.5.0
        with:
          node-version: ${{ steps.node.outputs.VERSION }}
      - name: Get filters string for all packages
        id: all-filters
        run: |
          export FILTERS=$( \
            node scripts/ci/get-filters.js all ${{ github.ref }} \
          )
          FILTERS="${FILTERS//'%'/'%25'}"
          FILTERS="${FILTERS//$'\n'/'%0A'}"
          FILTERS="${FILTERS//$'\r'/'%0D'}"
          echo "::set-output name=filters::$FILTERS"
      - name: Check for file changes in all packages
        uses: dorny/paths-filter@v2.10.2
        id: all-filter
        with:
          filters: |
            ${{ steps.all-filters.outputs.filters }}
      - name: Get filters string for performance testing job
        id: performance-filters
        run: |
          export FILTERS=$( \
            node scripts/ci/get-filters.js performance ${{ github.ref }} \
          )
          FILTERS="${FILTERS//'%'/'%25'}"
          FILTERS="${FILTERS//$'\n'/'%0A'}"
          FILTERS="${FILTERS//$'\r'/'%0D'}"
          echo "::set-output name=filters::$FILTERS"
      - name: Check for file changes in performance tested packages
        uses: dorny/paths-filter@v2.10.2
        id: performance-filter
        with:
          filters: |
            ${{ steps.performance-filters.outputs.filters }}
      - name: Get filters string for mutation testing job
        id: mutation-filters
        run: |
          export FILTERS=$(node scripts/ci/get-filters.js mutation)
          FILTERS="${FILTERS//'%'/'%25'}"
          FILTERS="${FILTERS//$'\n'/'%0A'}"
          FILTERS="${FILTERS//$'\r'/'%0D'}"
          echo "::set-output name=filters::$FILTERS"
      - name: Check for file changes in mutation tested packages
        uses: dorny/paths-filter@v2.10.2
        id: mutation-filter
        with:
          filters: |
            ${{ steps.mutation-filters.outputs.filters }}
      - name: Get filters string for test job
        id: tested-filters
        run: |
          export FILTERS=$( \
            node scripts/ci/get-filters.js test ${{ github.ref }} \
          )
          FILTERS="${FILTERS//'%'/'%25'}"
          FILTERS="${FILTERS//$'\n'/'%0A'}"
          FILTERS="${FILTERS//$'\r'/'%0D'}"
          echo "::set-output name=filters::$FILTERS"
      - name: Check for file changes in tested packages
        uses: dorny/paths-filter@v2.10.2
        id: tested-filter
        with:
          filters: |
            ${{ steps.tested-filters.outputs.filters }}
  test-performance:
    name: Performance
    runs-on: ubuntu-latest
    needs: [changes, compile, test]
    if: ${{ needs.changes.outputs.performance-packages != '[]' }}
    strategy:
      matrix:
        package: ${{ fromJSON(needs.changes.outputs.performance-packages) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.4.0
      - name: Cache compiled package
        uses: actions/cache@v2
        with:
          path: |
            packages/*/build
            packages/*/lib
            packages/*/tsconfig.tsbuildinfo
          key: >-
            compiled
            ${{ matrix.package }}
            ${{ hashFiles(format('packages/{0}/src/**', matrix.package)) }}
          restore-keys: |
            compiled ${{ matrix.package }}
      - name: Get Node.js configuration
        id: node
        run: echo ::set-output name=VERSION::$(cat .nvmrc)
      - name: Install Node.js
        uses: actions/setup-node@v2.5.0
        with:
          node-version: ${{ steps.node.outputs.VERSION }}
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Run performance tests for packages/${{ matrix.package }}
        run: npm run test:performance -- ${{ matrix.package }}
  compile:
    name: Compile
    runs-on: ubuntu-latest
    needs: [changes]
    if: ${{ needs.changes.outputs.all-packages != '[]' }}
    strategy:
      matrix:
        package: ${{ fromJSON(needs.changes.outputs.all-packages) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.4.0
      - name: Cache compiled package
        uses: actions/cache@v2
        with:
          path: |
            packages/*/build
            packages/*/lib
            packages/*/tsconfig.tsbuildinfo
          key: >-
            compiled
            ${{ matrix.package }}
            ${{ hashFiles(format('packages/{0}/src/**', matrix.package)) }}
          restore-keys: |
            compiled ${{ matrix.package }}
      - name: Get Node.js configuration
        id: node
        run: echo ::set-output name=VERSION::$(cat .nvmrc)
      - name: Install Node.js
        uses: actions/setup-node@v2.5.0
        with:
          node-version: ${{ steps.node.outputs.VERSION }}
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Compile packages/${{ matrix.package }}
        run: npm run compile --workspace=packages/${{ matrix.package }}
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [changes, compile]
    if: ${{ needs.changes.outputs.tested-packages != '[]' }}
    strategy:
      matrix:
        package: ${{ fromJSON(needs.changes.outputs.tested-packages) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.4.0
      - name: Cache compiled package
        uses: actions/cache@v2
        with:
          path: |
            packages/*/build
            packages/*/lib
            packages/*/tsconfig.tsbuildinfo
          key: >-
            compiled
            ${{ matrix.package }}
            ${{ hashFiles(format('packages/{0}/src/**', matrix.package)) }}
          restore-keys: |
            compiled ${{ matrix.package }}
      - name: Get Node.js configuration
        id: node
        run: echo ::set-output name=VERSION::$(cat .nvmrc)
      - name: Install Node.js
        uses: actions/setup-node@v2.5.0
        with:
          node-version: ${{ steps.node.outputs.VERSION }}
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Run test suite for packages/${{ matrix.package }}
        run: npm run coverage -- ${{ matrix.package }}
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2.1.0
        with:
          file: ./_reports/coverage/lcov.info
          flags: package-${{ matrix.package }}
  test-mutation:
    name: Mutation
    runs-on: ubuntu-latest
    needs: [changes, compile, test]
    if: ${{ needs.changes.outputs.mutation-packages != '[]' }}
    strategy:
      matrix:
        package: ${{ fromJSON(needs.changes.outputs.mutation-packages) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.4.0
      - name: Cache compiled package
        uses: actions/cache@v2
        with:
          path: |
            packages/*/build
            packages/*/lib
            packages/*/tsconfig.tsbuildinfo
          key: >-
            mutation
            ${{ hashFiles('packages/*/src/**') }}
          restore-keys: |
            mutation
      - name: Get Node.js configuration
        id: node
        run: echo ::set-output name=VERSION::$(cat .nvmrc)
      - name: Install Node.js
        uses: actions/setup-node@v2.5.0
        with:
          node-version: ${{ steps.node.outputs.VERSION }}
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Run mutation tests for packages/${{ matrix.package }}
        run: npm run test:mutation -- ${{ matrix.package }}
      - name: Upload mutation report as artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: mutation-report-${{ matrix.package }}-${{ github.sha }}
          path: |
            _reports/mutation
